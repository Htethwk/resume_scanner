# -*- coding: utf-8 -*-
"""resume Scanner.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GTxln1zkaWlsivSddmMFi_We03-4L3Ys
"""

pip install pdfplumber

from google.colab import drive
drive.mount('/content/drive')

import pdfplumber

text = ""
def extract_text_from_pdf(pdf_path):
  with pdfplumber.open(pdf_path) as pdf:
    for page in pdf.pages:
      text += page.extract_text()
  return text

import spacy
nlp = spacy.load('en_core_web_sm')

def extract_line(text):
  doc = nlp(text)
  return [(ent.text,ent.label_) for ent in doc.ents ]

pip install rapidfuzz

from rapidfuzz import fuzz

def similarity(resume_text, job_description):
  return fuzz.ratio(resume_text, job_description)

def scoring(resume_skill, job_skill):
  matched_skills = set(resume_skill) . set(job_skill)
  score = (len(matched_skills)/len(job_skill)) * 100
  return round(score,2)

def final_resume_score(skill_score, similarity_score, weight1=0.6, weight2=0.4):
    return round((weight1 * skill_score) + (weight2 * similarity_score), 2)

pip install streamlit

import streamlit as st

st.title("AI-Powered Resume Screener")

resume_text = st.text_area("Paste Resume Text")
job_text = st.text_area("Paste Job Description")

if st.button("Score Resume"):
    resume_skills = extract_skills(resume_text)
    job_skills = extract_skills(job_text)

    skill_score = score_by_skill_match(resume_skills, job_skills)
    similarity = semantic_similarity(resume_text, job_text)
    total_score = final_resume_score(skill_score, similarity)

    st.write(f"âœ… Skill Match Score: {skill_score}")
    st.write(f"âœ… Semantic Similarity: {similarity}")
    st.write(f"ðŸŽ¯ Final Score: {total_score}")

!streamlit run app.py & npx localtunnel --port 8501y

!pip install streamlit cloudflared

!streamlit run app.py & npx cloudflared tunnel --url http://localhost:8501